from .. import loader, utils
import re

@loader.tds
class CalculatorMod(loader.Module):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è Hikka"""
    strings = {"name": "Calculator"}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    @loader.command()
    async def calc(self, message):
        """<–≤—ã—Ä–∞–∂–µ–Ω–∏–µ> - –í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–º–µ—Ä"""
        args = utils.get_args_raw(message)
        
        if not args:
            await message.edit("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>.calc 2+2</code>)")
            return

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞
        if not re.match(r'^[\d+\-*/(). ]+$', args):
            await message.edit("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏!")
            return

        try:
            result = eval(args)
            await message.edit(f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{result}</code>")
        except ZeroDivisionError:
            await message.edit("‚ùå –û—à–∏–±–∫–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def register(client):
    return CalculatorMod(client)     
